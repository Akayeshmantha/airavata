/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.data.transfer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-12")
public class FileTransferRequestModel implements org.apache.thrift.TBase<FileTransferRequestModel, FileTransferRequestModel._Fields>, java.io.Serializable, Cloneable, Comparable<FileTransferRequestModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileTransferRequestModel");

  private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GATEWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gatewayId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcHostname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SRC_LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcLoginName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SRC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("srcPort", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SRC_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("srcProtocol", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SRC_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("srcFilePath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SRC_HOST_CRED_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("srcHostCredToken", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DEST_HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("destHostname", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DEST_LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("destLoginName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DEST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("destPort", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField DEST_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("destProtocol", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DEST_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("destFilePath", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DEST_HOST_CRED_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("destHostCredToken", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FILE_TRANSFER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileTransferMode", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TRANSFER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("transferStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField TRANSFER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("transferTime", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField CREATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifiedType", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField CALLBACK_EMAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("callbackEmails", org.apache.thrift.protocol.TType.LIST, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileTransferRequestModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileTransferRequestModelTupleSchemeFactory());
  }

  private String transferId; // optional
  private String gatewayId; // optional
  private String username; // optional
  private String srcHostname; // optional
  private String srcLoginName; // optional
  private long srcPort; // optional
  private StorageResourceProtocol srcProtocol; // optional
  private String srcFilePath; // optional
  private String srcHostCredToken; // optional
  private String destHostname; // optional
  private String destLoginName; // optional
  private long destPort; // optional
  private StorageResourceProtocol destProtocol; // optional
  private String destFilePath; // optional
  private String destHostCredToken; // optional
  private FileTransferMode fileTransferMode; // optional
  private FileTransferStatus transferStatus; // optional
  private long fileSize; // optional
  private long transferTime; // optional
  private long createdTime; // optional
  private long lastModifiedType; // optional
  private List<String> callbackEmails; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRANSFER_ID((short)1, "transferId"),
    GATEWAY_ID((short)2, "gatewayId"),
    USERNAME((short)3, "username"),
    SRC_HOSTNAME((short)4, "srcHostname"),
    SRC_LOGIN_NAME((short)5, "srcLoginName"),
    SRC_PORT((short)6, "srcPort"),
    /**
     * 
     * @see StorageResourceProtocol
     */
    SRC_PROTOCOL((short)7, "srcProtocol"),
    SRC_FILE_PATH((short)8, "srcFilePath"),
    SRC_HOST_CRED_TOKEN((short)9, "srcHostCredToken"),
    DEST_HOSTNAME((short)10, "destHostname"),
    DEST_LOGIN_NAME((short)11, "destLoginName"),
    DEST_PORT((short)12, "destPort"),
    /**
     * 
     * @see StorageResourceProtocol
     */
    DEST_PROTOCOL((short)13, "destProtocol"),
    DEST_FILE_PATH((short)14, "destFilePath"),
    DEST_HOST_CRED_TOKEN((short)15, "destHostCredToken"),
    /**
     * 
     * @see FileTransferMode
     */
    FILE_TRANSFER_MODE((short)16, "fileTransferMode"),
    /**
     * 
     * @see FileTransferStatus
     */
    TRANSFER_STATUS((short)17, "transferStatus"),
    FILE_SIZE((short)18, "fileSize"),
    TRANSFER_TIME((short)19, "transferTime"),
    CREATED_TIME((short)20, "createdTime"),
    LAST_MODIFIED_TYPE((short)21, "lastModifiedType"),
    CALLBACK_EMAILS((short)22, "callbackEmails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSFER_ID
          return TRANSFER_ID;
        case 2: // GATEWAY_ID
          return GATEWAY_ID;
        case 3: // USERNAME
          return USERNAME;
        case 4: // SRC_HOSTNAME
          return SRC_HOSTNAME;
        case 5: // SRC_LOGIN_NAME
          return SRC_LOGIN_NAME;
        case 6: // SRC_PORT
          return SRC_PORT;
        case 7: // SRC_PROTOCOL
          return SRC_PROTOCOL;
        case 8: // SRC_FILE_PATH
          return SRC_FILE_PATH;
        case 9: // SRC_HOST_CRED_TOKEN
          return SRC_HOST_CRED_TOKEN;
        case 10: // DEST_HOSTNAME
          return DEST_HOSTNAME;
        case 11: // DEST_LOGIN_NAME
          return DEST_LOGIN_NAME;
        case 12: // DEST_PORT
          return DEST_PORT;
        case 13: // DEST_PROTOCOL
          return DEST_PROTOCOL;
        case 14: // DEST_FILE_PATH
          return DEST_FILE_PATH;
        case 15: // DEST_HOST_CRED_TOKEN
          return DEST_HOST_CRED_TOKEN;
        case 16: // FILE_TRANSFER_MODE
          return FILE_TRANSFER_MODE;
        case 17: // TRANSFER_STATUS
          return TRANSFER_STATUS;
        case 18: // FILE_SIZE
          return FILE_SIZE;
        case 19: // TRANSFER_TIME
          return TRANSFER_TIME;
        case 20: // CREATED_TIME
          return CREATED_TIME;
        case 21: // LAST_MODIFIED_TYPE
          return LAST_MODIFIED_TYPE;
        case 22: // CALLBACK_EMAILS
          return CALLBACK_EMAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SRCPORT_ISSET_ID = 0;
  private static final int __DESTPORT_ISSET_ID = 1;
  private static final int __FILESIZE_ISSET_ID = 2;
  private static final int __TRANSFERTIME_ISSET_ID = 3;
  private static final int __CREATEDTIME_ISSET_ID = 4;
  private static final int __LASTMODIFIEDTYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRANSFER_ID,_Fields.GATEWAY_ID,_Fields.USERNAME,_Fields.SRC_HOSTNAME,_Fields.SRC_LOGIN_NAME,_Fields.SRC_PORT,_Fields.SRC_PROTOCOL,_Fields.SRC_FILE_PATH,_Fields.SRC_HOST_CRED_TOKEN,_Fields.DEST_HOSTNAME,_Fields.DEST_LOGIN_NAME,_Fields.DEST_PORT,_Fields.DEST_PROTOCOL,_Fields.DEST_FILE_PATH,_Fields.DEST_HOST_CRED_TOKEN,_Fields.FILE_TRANSFER_MODE,_Fields.TRANSFER_STATUS,_Fields.FILE_SIZE,_Fields.TRANSFER_TIME,_Fields.CREATED_TIME,_Fields.LAST_MODIFIED_TYPE,_Fields.CALLBACK_EMAILS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GATEWAY_ID, new org.apache.thrift.meta_data.FieldMetaData("gatewayId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("srcHostname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcLoginName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_PORT, new org.apache.thrift.meta_data.FieldMetaData("srcPort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SRC_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("srcProtocol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StorageResourceProtocol.class)));
    tmpMap.put(_Fields.SRC_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("srcFilePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_HOST_CRED_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("srcHostCredToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEST_HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("destHostname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEST_LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("destLoginName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEST_PORT, new org.apache.thrift.meta_data.FieldMetaData("destPort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEST_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("destProtocol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StorageResourceProtocol.class)));
    tmpMap.put(_Fields.DEST_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("destFilePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEST_HOST_CRED_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("destHostCredToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TRANSFER_MODE, new org.apache.thrift.meta_data.FieldMetaData("fileTransferMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileTransferMode.class)));
    tmpMap.put(_Fields.TRANSFER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("transferStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileTransferStatus.class)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRANSFER_TIME, new org.apache.thrift.meta_data.FieldMetaData("transferTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("createdTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFIED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lastModifiedType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CALLBACK_EMAILS, new org.apache.thrift.meta_data.FieldMetaData("callbackEmails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileTransferRequestModel.class, metaDataMap);
  }

  public FileTransferRequestModel() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileTransferRequestModel(FileTransferRequestModel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTransferId()) {
      this.transferId = other.transferId;
    }
    if (other.isSetGatewayId()) {
      this.gatewayId = other.gatewayId;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetSrcHostname()) {
      this.srcHostname = other.srcHostname;
    }
    if (other.isSetSrcLoginName()) {
      this.srcLoginName = other.srcLoginName;
    }
    this.srcPort = other.srcPort;
    if (other.isSetSrcProtocol()) {
      this.srcProtocol = other.srcProtocol;
    }
    if (other.isSetSrcFilePath()) {
      this.srcFilePath = other.srcFilePath;
    }
    if (other.isSetSrcHostCredToken()) {
      this.srcHostCredToken = other.srcHostCredToken;
    }
    if (other.isSetDestHostname()) {
      this.destHostname = other.destHostname;
    }
    if (other.isSetDestLoginName()) {
      this.destLoginName = other.destLoginName;
    }
    this.destPort = other.destPort;
    if (other.isSetDestProtocol()) {
      this.destProtocol = other.destProtocol;
    }
    if (other.isSetDestFilePath()) {
      this.destFilePath = other.destFilePath;
    }
    if (other.isSetDestHostCredToken()) {
      this.destHostCredToken = other.destHostCredToken;
    }
    if (other.isSetFileTransferMode()) {
      this.fileTransferMode = other.fileTransferMode;
    }
    if (other.isSetTransferStatus()) {
      this.transferStatus = other.transferStatus;
    }
    this.fileSize = other.fileSize;
    this.transferTime = other.transferTime;
    this.createdTime = other.createdTime;
    this.lastModifiedType = other.lastModifiedType;
    if (other.isSetCallbackEmails()) {
      List<String> __this__callbackEmails = new ArrayList<String>(other.callbackEmails);
      this.callbackEmails = __this__callbackEmails;
    }
  }

  public FileTransferRequestModel deepCopy() {
    return new FileTransferRequestModel(this);
  }

  @Override
  public void clear() {
    this.transferId = null;
    this.gatewayId = null;
    this.username = null;
    this.srcHostname = null;
    this.srcLoginName = null;
    setSrcPortIsSet(false);
    this.srcPort = 0;
    this.srcProtocol = null;
    this.srcFilePath = null;
    this.srcHostCredToken = null;
    this.destHostname = null;
    this.destLoginName = null;
    setDestPortIsSet(false);
    this.destPort = 0;
    this.destProtocol = null;
    this.destFilePath = null;
    this.destHostCredToken = null;
    this.fileTransferMode = null;
    this.transferStatus = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    setTransferTimeIsSet(false);
    this.transferTime = 0;
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    setLastModifiedTypeIsSet(false);
    this.lastModifiedType = 0;
    this.callbackEmails = null;
  }

  public String getTransferId() {
    return this.transferId;
  }

  public void setTransferId(String transferId) {
    this.transferId = transferId;
  }

  public void unsetTransferId() {
    this.transferId = null;
  }

  /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferId() {
    return this.transferId != null;
  }

  public void setTransferIdIsSet(boolean value) {
    if (!value) {
      this.transferId = null;
    }
  }

  public String getGatewayId() {
    return this.gatewayId;
  }

  public void setGatewayId(String gatewayId) {
    this.gatewayId = gatewayId;
  }

  public void unsetGatewayId() {
    this.gatewayId = null;
  }

  /** Returns true if field gatewayId is set (has been assigned a value) and false otherwise */
  public boolean isSetGatewayId() {
    return this.gatewayId != null;
  }

  public void setGatewayIdIsSet(boolean value) {
    if (!value) {
      this.gatewayId = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getSrcHostname() {
    return this.srcHostname;
  }

  public void setSrcHostname(String srcHostname) {
    this.srcHostname = srcHostname;
  }

  public void unsetSrcHostname() {
    this.srcHostname = null;
  }

  /** Returns true if field srcHostname is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcHostname() {
    return this.srcHostname != null;
  }

  public void setSrcHostnameIsSet(boolean value) {
    if (!value) {
      this.srcHostname = null;
    }
  }

  public String getSrcLoginName() {
    return this.srcLoginName;
  }

  public void setSrcLoginName(String srcLoginName) {
    this.srcLoginName = srcLoginName;
  }

  public void unsetSrcLoginName() {
    this.srcLoginName = null;
  }

  /** Returns true if field srcLoginName is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcLoginName() {
    return this.srcLoginName != null;
  }

  public void setSrcLoginNameIsSet(boolean value) {
    if (!value) {
      this.srcLoginName = null;
    }
  }

  public long getSrcPort() {
    return this.srcPort;
  }

  public void setSrcPort(long srcPort) {
    this.srcPort = srcPort;
    setSrcPortIsSet(true);
  }

  public void unsetSrcPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCPORT_ISSET_ID);
  }

  /** Returns true if field srcPort is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcPort() {
    return EncodingUtils.testBit(__isset_bitfield, __SRCPORT_ISSET_ID);
  }

  public void setSrcPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCPORT_ISSET_ID, value);
  }

  /**
   * 
   * @see StorageResourceProtocol
   */
  public StorageResourceProtocol getSrcProtocol() {
    return this.srcProtocol;
  }

  /**
   * 
   * @see StorageResourceProtocol
   */
  public void setSrcProtocol(StorageResourceProtocol srcProtocol) {
    this.srcProtocol = srcProtocol;
  }

  public void unsetSrcProtocol() {
    this.srcProtocol = null;
  }

  /** Returns true if field srcProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcProtocol() {
    return this.srcProtocol != null;
  }

  public void setSrcProtocolIsSet(boolean value) {
    if (!value) {
      this.srcProtocol = null;
    }
  }

  public String getSrcFilePath() {
    return this.srcFilePath;
  }

  public void setSrcFilePath(String srcFilePath) {
    this.srcFilePath = srcFilePath;
  }

  public void unsetSrcFilePath() {
    this.srcFilePath = null;
  }

  /** Returns true if field srcFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcFilePath() {
    return this.srcFilePath != null;
  }

  public void setSrcFilePathIsSet(boolean value) {
    if (!value) {
      this.srcFilePath = null;
    }
  }

  public String getSrcHostCredToken() {
    return this.srcHostCredToken;
  }

  public void setSrcHostCredToken(String srcHostCredToken) {
    this.srcHostCredToken = srcHostCredToken;
  }

  public void unsetSrcHostCredToken() {
    this.srcHostCredToken = null;
  }

  /** Returns true if field srcHostCredToken is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcHostCredToken() {
    return this.srcHostCredToken != null;
  }

  public void setSrcHostCredTokenIsSet(boolean value) {
    if (!value) {
      this.srcHostCredToken = null;
    }
  }

  public String getDestHostname() {
    return this.destHostname;
  }

  public void setDestHostname(String destHostname) {
    this.destHostname = destHostname;
  }

  public void unsetDestHostname() {
    this.destHostname = null;
  }

  /** Returns true if field destHostname is set (has been assigned a value) and false otherwise */
  public boolean isSetDestHostname() {
    return this.destHostname != null;
  }

  public void setDestHostnameIsSet(boolean value) {
    if (!value) {
      this.destHostname = null;
    }
  }

  public String getDestLoginName() {
    return this.destLoginName;
  }

  public void setDestLoginName(String destLoginName) {
    this.destLoginName = destLoginName;
  }

  public void unsetDestLoginName() {
    this.destLoginName = null;
  }

  /** Returns true if field destLoginName is set (has been assigned a value) and false otherwise */
  public boolean isSetDestLoginName() {
    return this.destLoginName != null;
  }

  public void setDestLoginNameIsSet(boolean value) {
    if (!value) {
      this.destLoginName = null;
    }
  }

  public long getDestPort() {
    return this.destPort;
  }

  public void setDestPort(long destPort) {
    this.destPort = destPort;
    setDestPortIsSet(true);
  }

  public void unsetDestPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DESTPORT_ISSET_ID);
  }

  /** Returns true if field destPort is set (has been assigned a value) and false otherwise */
  public boolean isSetDestPort() {
    return EncodingUtils.testBit(__isset_bitfield, __DESTPORT_ISSET_ID);
  }

  public void setDestPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DESTPORT_ISSET_ID, value);
  }

  /**
   * 
   * @see StorageResourceProtocol
   */
  public StorageResourceProtocol getDestProtocol() {
    return this.destProtocol;
  }

  /**
   * 
   * @see StorageResourceProtocol
   */
  public void setDestProtocol(StorageResourceProtocol destProtocol) {
    this.destProtocol = destProtocol;
  }

  public void unsetDestProtocol() {
    this.destProtocol = null;
  }

  /** Returns true if field destProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetDestProtocol() {
    return this.destProtocol != null;
  }

  public void setDestProtocolIsSet(boolean value) {
    if (!value) {
      this.destProtocol = null;
    }
  }

  public String getDestFilePath() {
    return this.destFilePath;
  }

  public void setDestFilePath(String destFilePath) {
    this.destFilePath = destFilePath;
  }

  public void unsetDestFilePath() {
    this.destFilePath = null;
  }

  /** Returns true if field destFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetDestFilePath() {
    return this.destFilePath != null;
  }

  public void setDestFilePathIsSet(boolean value) {
    if (!value) {
      this.destFilePath = null;
    }
  }

  public String getDestHostCredToken() {
    return this.destHostCredToken;
  }

  public void setDestHostCredToken(String destHostCredToken) {
    this.destHostCredToken = destHostCredToken;
  }

  public void unsetDestHostCredToken() {
    this.destHostCredToken = null;
  }

  /** Returns true if field destHostCredToken is set (has been assigned a value) and false otherwise */
  public boolean isSetDestHostCredToken() {
    return this.destHostCredToken != null;
  }

  public void setDestHostCredTokenIsSet(boolean value) {
    if (!value) {
      this.destHostCredToken = null;
    }
  }

  /**
   * 
   * @see FileTransferMode
   */
  public FileTransferMode getFileTransferMode() {
    return this.fileTransferMode;
  }

  /**
   * 
   * @see FileTransferMode
   */
  public void setFileTransferMode(FileTransferMode fileTransferMode) {
    this.fileTransferMode = fileTransferMode;
  }

  public void unsetFileTransferMode() {
    this.fileTransferMode = null;
  }

  /** Returns true if field fileTransferMode is set (has been assigned a value) and false otherwise */
  public boolean isSetFileTransferMode() {
    return this.fileTransferMode != null;
  }

  public void setFileTransferModeIsSet(boolean value) {
    if (!value) {
      this.fileTransferMode = null;
    }
  }

  /**
   * 
   * @see FileTransferStatus
   */
  public FileTransferStatus getTransferStatus() {
    return this.transferStatus;
  }

  /**
   * 
   * @see FileTransferStatus
   */
  public void setTransferStatus(FileTransferStatus transferStatus) {
    this.transferStatus = transferStatus;
  }

  public void unsetTransferStatus() {
    this.transferStatus = null;
  }

  /** Returns true if field transferStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferStatus() {
    return this.transferStatus != null;
  }

  public void setTransferStatusIsSet(boolean value) {
    if (!value) {
      this.transferStatus = null;
    }
  }

  public long getFileSize() {
    return this.fileSize;
  }

  public void setFileSize(long fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public long getTransferTime() {
    return this.transferTime;
  }

  public void setTransferTime(long transferTime) {
    this.transferTime = transferTime;
    setTransferTimeIsSet(true);
  }

  public void unsetTransferTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSFERTIME_ISSET_ID);
  }

  /** Returns true if field transferTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSFERTIME_ISSET_ID);
  }

  public void setTransferTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSFERTIME_ISSET_ID, value);
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDTIME_ISSET_ID);
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDTIME_ISSET_ID);
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDTIME_ISSET_ID, value);
  }

  public long getLastModifiedType() {
    return this.lastModifiedType;
  }

  public void setLastModifiedType(long lastModifiedType) {
    this.lastModifiedType = lastModifiedType;
    setLastModifiedTypeIsSet(true);
  }

  public void unsetLastModifiedType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFIEDTYPE_ISSET_ID);
  }

  /** Returns true if field lastModifiedType is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifiedType() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFIEDTYPE_ISSET_ID);
  }

  public void setLastModifiedTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFIEDTYPE_ISSET_ID, value);
  }

  public int getCallbackEmailsSize() {
    return (this.callbackEmails == null) ? 0 : this.callbackEmails.size();
  }

  public java.util.Iterator<String> getCallbackEmailsIterator() {
    return (this.callbackEmails == null) ? null : this.callbackEmails.iterator();
  }

  public void addToCallbackEmails(String elem) {
    if (this.callbackEmails == null) {
      this.callbackEmails = new ArrayList<String>();
    }
    this.callbackEmails.add(elem);
  }

  public List<String> getCallbackEmails() {
    return this.callbackEmails;
  }

  public void setCallbackEmails(List<String> callbackEmails) {
    this.callbackEmails = callbackEmails;
  }

  public void unsetCallbackEmails() {
    this.callbackEmails = null;
  }

  /** Returns true if field callbackEmails is set (has been assigned a value) and false otherwise */
  public boolean isSetCallbackEmails() {
    return this.callbackEmails != null;
  }

  public void setCallbackEmailsIsSet(boolean value) {
    if (!value) {
      this.callbackEmails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRANSFER_ID:
      if (value == null) {
        unsetTransferId();
      } else {
        setTransferId((String)value);
      }
      break;

    case GATEWAY_ID:
      if (value == null) {
        unsetGatewayId();
      } else {
        setGatewayId((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case SRC_HOSTNAME:
      if (value == null) {
        unsetSrcHostname();
      } else {
        setSrcHostname((String)value);
      }
      break;

    case SRC_LOGIN_NAME:
      if (value == null) {
        unsetSrcLoginName();
      } else {
        setSrcLoginName((String)value);
      }
      break;

    case SRC_PORT:
      if (value == null) {
        unsetSrcPort();
      } else {
        setSrcPort((Long)value);
      }
      break;

    case SRC_PROTOCOL:
      if (value == null) {
        unsetSrcProtocol();
      } else {
        setSrcProtocol((StorageResourceProtocol)value);
      }
      break;

    case SRC_FILE_PATH:
      if (value == null) {
        unsetSrcFilePath();
      } else {
        setSrcFilePath((String)value);
      }
      break;

    case SRC_HOST_CRED_TOKEN:
      if (value == null) {
        unsetSrcHostCredToken();
      } else {
        setSrcHostCredToken((String)value);
      }
      break;

    case DEST_HOSTNAME:
      if (value == null) {
        unsetDestHostname();
      } else {
        setDestHostname((String)value);
      }
      break;

    case DEST_LOGIN_NAME:
      if (value == null) {
        unsetDestLoginName();
      } else {
        setDestLoginName((String)value);
      }
      break;

    case DEST_PORT:
      if (value == null) {
        unsetDestPort();
      } else {
        setDestPort((Long)value);
      }
      break;

    case DEST_PROTOCOL:
      if (value == null) {
        unsetDestProtocol();
      } else {
        setDestProtocol((StorageResourceProtocol)value);
      }
      break;

    case DEST_FILE_PATH:
      if (value == null) {
        unsetDestFilePath();
      } else {
        setDestFilePath((String)value);
      }
      break;

    case DEST_HOST_CRED_TOKEN:
      if (value == null) {
        unsetDestHostCredToken();
      } else {
        setDestHostCredToken((String)value);
      }
      break;

    case FILE_TRANSFER_MODE:
      if (value == null) {
        unsetFileTransferMode();
      } else {
        setFileTransferMode((FileTransferMode)value);
      }
      break;

    case TRANSFER_STATUS:
      if (value == null) {
        unsetTransferStatus();
      } else {
        setTransferStatus((FileTransferStatus)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Long)value);
      }
      break;

    case TRANSFER_TIME:
      if (value == null) {
        unsetTransferTime();
      } else {
        setTransferTime((Long)value);
      }
      break;

    case CREATED_TIME:
      if (value == null) {
        unsetCreatedTime();
      } else {
        setCreatedTime((Long)value);
      }
      break;

    case LAST_MODIFIED_TYPE:
      if (value == null) {
        unsetLastModifiedType();
      } else {
        setLastModifiedType((Long)value);
      }
      break;

    case CALLBACK_EMAILS:
      if (value == null) {
        unsetCallbackEmails();
      } else {
        setCallbackEmails((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSFER_ID:
      return getTransferId();

    case GATEWAY_ID:
      return getGatewayId();

    case USERNAME:
      return getUsername();

    case SRC_HOSTNAME:
      return getSrcHostname();

    case SRC_LOGIN_NAME:
      return getSrcLoginName();

    case SRC_PORT:
      return getSrcPort();

    case SRC_PROTOCOL:
      return getSrcProtocol();

    case SRC_FILE_PATH:
      return getSrcFilePath();

    case SRC_HOST_CRED_TOKEN:
      return getSrcHostCredToken();

    case DEST_HOSTNAME:
      return getDestHostname();

    case DEST_LOGIN_NAME:
      return getDestLoginName();

    case DEST_PORT:
      return getDestPort();

    case DEST_PROTOCOL:
      return getDestProtocol();

    case DEST_FILE_PATH:
      return getDestFilePath();

    case DEST_HOST_CRED_TOKEN:
      return getDestHostCredToken();

    case FILE_TRANSFER_MODE:
      return getFileTransferMode();

    case TRANSFER_STATUS:
      return getTransferStatus();

    case FILE_SIZE:
      return getFileSize();

    case TRANSFER_TIME:
      return getTransferTime();

    case CREATED_TIME:
      return getCreatedTime();

    case LAST_MODIFIED_TYPE:
      return getLastModifiedType();

    case CALLBACK_EMAILS:
      return getCallbackEmails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRANSFER_ID:
      return isSetTransferId();
    case GATEWAY_ID:
      return isSetGatewayId();
    case USERNAME:
      return isSetUsername();
    case SRC_HOSTNAME:
      return isSetSrcHostname();
    case SRC_LOGIN_NAME:
      return isSetSrcLoginName();
    case SRC_PORT:
      return isSetSrcPort();
    case SRC_PROTOCOL:
      return isSetSrcProtocol();
    case SRC_FILE_PATH:
      return isSetSrcFilePath();
    case SRC_HOST_CRED_TOKEN:
      return isSetSrcHostCredToken();
    case DEST_HOSTNAME:
      return isSetDestHostname();
    case DEST_LOGIN_NAME:
      return isSetDestLoginName();
    case DEST_PORT:
      return isSetDestPort();
    case DEST_PROTOCOL:
      return isSetDestProtocol();
    case DEST_FILE_PATH:
      return isSetDestFilePath();
    case DEST_HOST_CRED_TOKEN:
      return isSetDestHostCredToken();
    case FILE_TRANSFER_MODE:
      return isSetFileTransferMode();
    case TRANSFER_STATUS:
      return isSetTransferStatus();
    case FILE_SIZE:
      return isSetFileSize();
    case TRANSFER_TIME:
      return isSetTransferTime();
    case CREATED_TIME:
      return isSetCreatedTime();
    case LAST_MODIFIED_TYPE:
      return isSetLastModifiedType();
    case CALLBACK_EMAILS:
      return isSetCallbackEmails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileTransferRequestModel)
      return this.equals((FileTransferRequestModel)that);
    return false;
  }

  public boolean equals(FileTransferRequestModel that) {
    if (that == null)
      return false;

    boolean this_present_transferId = true && this.isSetTransferId();
    boolean that_present_transferId = true && that.isSetTransferId();
    if (this_present_transferId || that_present_transferId) {
      if (!(this_present_transferId && that_present_transferId))
        return false;
      if (!this.transferId.equals(that.transferId))
        return false;
    }

    boolean this_present_gatewayId = true && this.isSetGatewayId();
    boolean that_present_gatewayId = true && that.isSetGatewayId();
    if (this_present_gatewayId || that_present_gatewayId) {
      if (!(this_present_gatewayId && that_present_gatewayId))
        return false;
      if (!this.gatewayId.equals(that.gatewayId))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_srcHostname = true && this.isSetSrcHostname();
    boolean that_present_srcHostname = true && that.isSetSrcHostname();
    if (this_present_srcHostname || that_present_srcHostname) {
      if (!(this_present_srcHostname && that_present_srcHostname))
        return false;
      if (!this.srcHostname.equals(that.srcHostname))
        return false;
    }

    boolean this_present_srcLoginName = true && this.isSetSrcLoginName();
    boolean that_present_srcLoginName = true && that.isSetSrcLoginName();
    if (this_present_srcLoginName || that_present_srcLoginName) {
      if (!(this_present_srcLoginName && that_present_srcLoginName))
        return false;
      if (!this.srcLoginName.equals(that.srcLoginName))
        return false;
    }

    boolean this_present_srcPort = true && this.isSetSrcPort();
    boolean that_present_srcPort = true && that.isSetSrcPort();
    if (this_present_srcPort || that_present_srcPort) {
      if (!(this_present_srcPort && that_present_srcPort))
        return false;
      if (this.srcPort != that.srcPort)
        return false;
    }

    boolean this_present_srcProtocol = true && this.isSetSrcProtocol();
    boolean that_present_srcProtocol = true && that.isSetSrcProtocol();
    if (this_present_srcProtocol || that_present_srcProtocol) {
      if (!(this_present_srcProtocol && that_present_srcProtocol))
        return false;
      if (!this.srcProtocol.equals(that.srcProtocol))
        return false;
    }

    boolean this_present_srcFilePath = true && this.isSetSrcFilePath();
    boolean that_present_srcFilePath = true && that.isSetSrcFilePath();
    if (this_present_srcFilePath || that_present_srcFilePath) {
      if (!(this_present_srcFilePath && that_present_srcFilePath))
        return false;
      if (!this.srcFilePath.equals(that.srcFilePath))
        return false;
    }

    boolean this_present_srcHostCredToken = true && this.isSetSrcHostCredToken();
    boolean that_present_srcHostCredToken = true && that.isSetSrcHostCredToken();
    if (this_present_srcHostCredToken || that_present_srcHostCredToken) {
      if (!(this_present_srcHostCredToken && that_present_srcHostCredToken))
        return false;
      if (!this.srcHostCredToken.equals(that.srcHostCredToken))
        return false;
    }

    boolean this_present_destHostname = true && this.isSetDestHostname();
    boolean that_present_destHostname = true && that.isSetDestHostname();
    if (this_present_destHostname || that_present_destHostname) {
      if (!(this_present_destHostname && that_present_destHostname))
        return false;
      if (!this.destHostname.equals(that.destHostname))
        return false;
    }

    boolean this_present_destLoginName = true && this.isSetDestLoginName();
    boolean that_present_destLoginName = true && that.isSetDestLoginName();
    if (this_present_destLoginName || that_present_destLoginName) {
      if (!(this_present_destLoginName && that_present_destLoginName))
        return false;
      if (!this.destLoginName.equals(that.destLoginName))
        return false;
    }

    boolean this_present_destPort = true && this.isSetDestPort();
    boolean that_present_destPort = true && that.isSetDestPort();
    if (this_present_destPort || that_present_destPort) {
      if (!(this_present_destPort && that_present_destPort))
        return false;
      if (this.destPort != that.destPort)
        return false;
    }

    boolean this_present_destProtocol = true && this.isSetDestProtocol();
    boolean that_present_destProtocol = true && that.isSetDestProtocol();
    if (this_present_destProtocol || that_present_destProtocol) {
      if (!(this_present_destProtocol && that_present_destProtocol))
        return false;
      if (!this.destProtocol.equals(that.destProtocol))
        return false;
    }

    boolean this_present_destFilePath = true && this.isSetDestFilePath();
    boolean that_present_destFilePath = true && that.isSetDestFilePath();
    if (this_present_destFilePath || that_present_destFilePath) {
      if (!(this_present_destFilePath && that_present_destFilePath))
        return false;
      if (!this.destFilePath.equals(that.destFilePath))
        return false;
    }

    boolean this_present_destHostCredToken = true && this.isSetDestHostCredToken();
    boolean that_present_destHostCredToken = true && that.isSetDestHostCredToken();
    if (this_present_destHostCredToken || that_present_destHostCredToken) {
      if (!(this_present_destHostCredToken && that_present_destHostCredToken))
        return false;
      if (!this.destHostCredToken.equals(that.destHostCredToken))
        return false;
    }

    boolean this_present_fileTransferMode = true && this.isSetFileTransferMode();
    boolean that_present_fileTransferMode = true && that.isSetFileTransferMode();
    if (this_present_fileTransferMode || that_present_fileTransferMode) {
      if (!(this_present_fileTransferMode && that_present_fileTransferMode))
        return false;
      if (!this.fileTransferMode.equals(that.fileTransferMode))
        return false;
    }

    boolean this_present_transferStatus = true && this.isSetTransferStatus();
    boolean that_present_transferStatus = true && that.isSetTransferStatus();
    if (this_present_transferStatus || that_present_transferStatus) {
      if (!(this_present_transferStatus && that_present_transferStatus))
        return false;
      if (!this.transferStatus.equals(that.transferStatus))
        return false;
    }

    boolean this_present_fileSize = true && this.isSetFileSize();
    boolean that_present_fileSize = true && that.isSetFileSize();
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_transferTime = true && this.isSetTransferTime();
    boolean that_present_transferTime = true && that.isSetTransferTime();
    if (this_present_transferTime || that_present_transferTime) {
      if (!(this_present_transferTime && that_present_transferTime))
        return false;
      if (this.transferTime != that.transferTime)
        return false;
    }

    boolean this_present_createdTime = true && this.isSetCreatedTime();
    boolean that_present_createdTime = true && that.isSetCreatedTime();
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_lastModifiedType = true && this.isSetLastModifiedType();
    boolean that_present_lastModifiedType = true && that.isSetLastModifiedType();
    if (this_present_lastModifiedType || that_present_lastModifiedType) {
      if (!(this_present_lastModifiedType && that_present_lastModifiedType))
        return false;
      if (this.lastModifiedType != that.lastModifiedType)
        return false;
    }

    boolean this_present_callbackEmails = true && this.isSetCallbackEmails();
    boolean that_present_callbackEmails = true && that.isSetCallbackEmails();
    if (this_present_callbackEmails || that_present_callbackEmails) {
      if (!(this_present_callbackEmails && that_present_callbackEmails))
        return false;
      if (!this.callbackEmails.equals(that.callbackEmails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_transferId = true && (isSetTransferId());
    list.add(present_transferId);
    if (present_transferId)
      list.add(transferId);

    boolean present_gatewayId = true && (isSetGatewayId());
    list.add(present_gatewayId);
    if (present_gatewayId)
      list.add(gatewayId);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_srcHostname = true && (isSetSrcHostname());
    list.add(present_srcHostname);
    if (present_srcHostname)
      list.add(srcHostname);

    boolean present_srcLoginName = true && (isSetSrcLoginName());
    list.add(present_srcLoginName);
    if (present_srcLoginName)
      list.add(srcLoginName);

    boolean present_srcPort = true && (isSetSrcPort());
    list.add(present_srcPort);
    if (present_srcPort)
      list.add(srcPort);

    boolean present_srcProtocol = true && (isSetSrcProtocol());
    list.add(present_srcProtocol);
    if (present_srcProtocol)
      list.add(srcProtocol.getValue());

    boolean present_srcFilePath = true && (isSetSrcFilePath());
    list.add(present_srcFilePath);
    if (present_srcFilePath)
      list.add(srcFilePath);

    boolean present_srcHostCredToken = true && (isSetSrcHostCredToken());
    list.add(present_srcHostCredToken);
    if (present_srcHostCredToken)
      list.add(srcHostCredToken);

    boolean present_destHostname = true && (isSetDestHostname());
    list.add(present_destHostname);
    if (present_destHostname)
      list.add(destHostname);

    boolean present_destLoginName = true && (isSetDestLoginName());
    list.add(present_destLoginName);
    if (present_destLoginName)
      list.add(destLoginName);

    boolean present_destPort = true && (isSetDestPort());
    list.add(present_destPort);
    if (present_destPort)
      list.add(destPort);

    boolean present_destProtocol = true && (isSetDestProtocol());
    list.add(present_destProtocol);
    if (present_destProtocol)
      list.add(destProtocol.getValue());

    boolean present_destFilePath = true && (isSetDestFilePath());
    list.add(present_destFilePath);
    if (present_destFilePath)
      list.add(destFilePath);

    boolean present_destHostCredToken = true && (isSetDestHostCredToken());
    list.add(present_destHostCredToken);
    if (present_destHostCredToken)
      list.add(destHostCredToken);

    boolean present_fileTransferMode = true && (isSetFileTransferMode());
    list.add(present_fileTransferMode);
    if (present_fileTransferMode)
      list.add(fileTransferMode.getValue());

    boolean present_transferStatus = true && (isSetTransferStatus());
    list.add(present_transferStatus);
    if (present_transferStatus)
      list.add(transferStatus.getValue());

    boolean present_fileSize = true && (isSetFileSize());
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_transferTime = true && (isSetTransferTime());
    list.add(present_transferTime);
    if (present_transferTime)
      list.add(transferTime);

    boolean present_createdTime = true && (isSetCreatedTime());
    list.add(present_createdTime);
    if (present_createdTime)
      list.add(createdTime);

    boolean present_lastModifiedType = true && (isSetLastModifiedType());
    list.add(present_lastModifiedType);
    if (present_lastModifiedType)
      list.add(lastModifiedType);

    boolean present_callbackEmails = true && (isSetCallbackEmails());
    list.add(present_callbackEmails);
    if (present_callbackEmails)
      list.add(callbackEmails);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileTransferRequestModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGatewayId()).compareTo(other.isSetGatewayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGatewayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatewayId, other.gatewayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcHostname()).compareTo(other.isSetSrcHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcHostname, other.srcHostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcLoginName()).compareTo(other.isSetSrcLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcLoginName, other.srcLoginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcPort()).compareTo(other.isSetSrcPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcPort, other.srcPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcProtocol()).compareTo(other.isSetSrcProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcProtocol, other.srcProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcFilePath()).compareTo(other.isSetSrcFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcFilePath, other.srcFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcHostCredToken()).compareTo(other.isSetSrcHostCredToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcHostCredToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcHostCredToken, other.srcHostCredToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestHostname()).compareTo(other.isSetDestHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destHostname, other.destHostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestLoginName()).compareTo(other.isSetDestLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destLoginName, other.destLoginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestPort()).compareTo(other.isSetDestPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destPort, other.destPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestProtocol()).compareTo(other.isSetDestProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destProtocol, other.destProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestFilePath()).compareTo(other.isSetDestFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destFilePath, other.destFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestHostCredToken()).compareTo(other.isSetDestHostCredToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestHostCredToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destHostCredToken, other.destHostCredToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileTransferMode()).compareTo(other.isSetFileTransferMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileTransferMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileTransferMode, other.fileTransferMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferStatus()).compareTo(other.isSetTransferStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferStatus, other.transferStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferTime()).compareTo(other.isSetTransferTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferTime, other.transferTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedTime()).compareTo(other.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdTime, other.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifiedType()).compareTo(other.isSetLastModifiedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifiedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifiedType, other.lastModifiedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallbackEmails()).compareTo(other.isSetCallbackEmails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallbackEmails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callbackEmails, other.callbackEmails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileTransferRequestModel(");
    boolean first = true;

    if (isSetTransferId()) {
      sb.append("transferId:");
      if (this.transferId == null) {
        sb.append("null");
      } else {
        sb.append(this.transferId);
      }
      first = false;
    }
    if (isSetGatewayId()) {
      if (!first) sb.append(", ");
      sb.append("gatewayId:");
      if (this.gatewayId == null) {
        sb.append("null");
      } else {
        sb.append(this.gatewayId);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetSrcHostname()) {
      if (!first) sb.append(", ");
      sb.append("srcHostname:");
      if (this.srcHostname == null) {
        sb.append("null");
      } else {
        sb.append(this.srcHostname);
      }
      first = false;
    }
    if (isSetSrcLoginName()) {
      if (!first) sb.append(", ");
      sb.append("srcLoginName:");
      if (this.srcLoginName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcLoginName);
      }
      first = false;
    }
    if (isSetSrcPort()) {
      if (!first) sb.append(", ");
      sb.append("srcPort:");
      sb.append(this.srcPort);
      first = false;
    }
    if (isSetSrcProtocol()) {
      if (!first) sb.append(", ");
      sb.append("srcProtocol:");
      if (this.srcProtocol == null) {
        sb.append("null");
      } else {
        sb.append(this.srcProtocol);
      }
      first = false;
    }
    if (isSetSrcFilePath()) {
      if (!first) sb.append(", ");
      sb.append("srcFilePath:");
      if (this.srcFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.srcFilePath);
      }
      first = false;
    }
    if (isSetSrcHostCredToken()) {
      if (!first) sb.append(", ");
      sb.append("srcHostCredToken:");
      if (this.srcHostCredToken == null) {
        sb.append("null");
      } else {
        sb.append(this.srcHostCredToken);
      }
      first = false;
    }
    if (isSetDestHostname()) {
      if (!first) sb.append(", ");
      sb.append("destHostname:");
      if (this.destHostname == null) {
        sb.append("null");
      } else {
        sb.append(this.destHostname);
      }
      first = false;
    }
    if (isSetDestLoginName()) {
      if (!first) sb.append(", ");
      sb.append("destLoginName:");
      if (this.destLoginName == null) {
        sb.append("null");
      } else {
        sb.append(this.destLoginName);
      }
      first = false;
    }
    if (isSetDestPort()) {
      if (!first) sb.append(", ");
      sb.append("destPort:");
      sb.append(this.destPort);
      first = false;
    }
    if (isSetDestProtocol()) {
      if (!first) sb.append(", ");
      sb.append("destProtocol:");
      if (this.destProtocol == null) {
        sb.append("null");
      } else {
        sb.append(this.destProtocol);
      }
      first = false;
    }
    if (isSetDestFilePath()) {
      if (!first) sb.append(", ");
      sb.append("destFilePath:");
      if (this.destFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.destFilePath);
      }
      first = false;
    }
    if (isSetDestHostCredToken()) {
      if (!first) sb.append(", ");
      sb.append("destHostCredToken:");
      if (this.destHostCredToken == null) {
        sb.append("null");
      } else {
        sb.append(this.destHostCredToken);
      }
      first = false;
    }
    if (isSetFileTransferMode()) {
      if (!first) sb.append(", ");
      sb.append("fileTransferMode:");
      if (this.fileTransferMode == null) {
        sb.append("null");
      } else {
        sb.append(this.fileTransferMode);
      }
      first = false;
    }
    if (isSetTransferStatus()) {
      if (!first) sb.append(", ");
      sb.append("transferStatus:");
      if (this.transferStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.transferStatus);
      }
      first = false;
    }
    if (isSetFileSize()) {
      if (!first) sb.append(", ");
      sb.append("fileSize:");
      sb.append(this.fileSize);
      first = false;
    }
    if (isSetTransferTime()) {
      if (!first) sb.append(", ");
      sb.append("transferTime:");
      sb.append(this.transferTime);
      first = false;
    }
    if (isSetCreatedTime()) {
      if (!first) sb.append(", ");
      sb.append("createdTime:");
      sb.append(this.createdTime);
      first = false;
    }
    if (isSetLastModifiedType()) {
      if (!first) sb.append(", ");
      sb.append("lastModifiedType:");
      sb.append(this.lastModifiedType);
      first = false;
    }
    if (isSetCallbackEmails()) {
      if (!first) sb.append(", ");
      sb.append("callbackEmails:");
      if (this.callbackEmails == null) {
        sb.append("null");
      } else {
        sb.append(this.callbackEmails);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileTransferRequestModelStandardSchemeFactory implements SchemeFactory {
    public FileTransferRequestModelStandardScheme getScheme() {
      return new FileTransferRequestModelStandardScheme();
    }
  }

  private static class FileTransferRequestModelStandardScheme extends StandardScheme<FileTransferRequestModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileTransferRequestModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferId = iprot.readString();
              struct.setTransferIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GATEWAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gatewayId = iprot.readString();
              struct.setGatewayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC_HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcHostname = iprot.readString();
              struct.setSrcHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SRC_LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcLoginName = iprot.readString();
              struct.setSrcLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SRC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.srcPort = iprot.readI64();
              struct.setSrcPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SRC_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.srcProtocol = org.apache.airavata.model.data.transfer.StorageResourceProtocol.findByValue(iprot.readI32());
              struct.setSrcProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SRC_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcFilePath = iprot.readString();
              struct.setSrcFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SRC_HOST_CRED_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcHostCredToken = iprot.readString();
              struct.setSrcHostCredTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEST_HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destHostname = iprot.readString();
              struct.setDestHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEST_LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destLoginName = iprot.readString();
              struct.setDestLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEST_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.destPort = iprot.readI64();
              struct.setDestPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEST_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.destProtocol = org.apache.airavata.model.data.transfer.StorageResourceProtocol.findByValue(iprot.readI32());
              struct.setDestProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DEST_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destFilePath = iprot.readString();
              struct.setDestFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEST_HOST_CRED_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destHostCredToken = iprot.readString();
              struct.setDestHostCredTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FILE_TRANSFER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileTransferMode = org.apache.airavata.model.data.transfer.FileTransferMode.findByValue(iprot.readI32());
              struct.setFileTransferModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TRANSFER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transferStatus = org.apache.airavata.model.data.transfer.FileTransferStatus.findByValue(iprot.readI32());
              struct.setTransferStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSize = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRANSFER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transferTime = iprot.readI64();
              struct.setTransferTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdTime = iprot.readI64();
              struct.setCreatedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LAST_MODIFIED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifiedType = iprot.readI64();
              struct.setLastModifiedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CALLBACK_EMAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.callbackEmails = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.callbackEmails.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCallbackEmailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileTransferRequestModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.transferId != null) {
        if (struct.isSetTransferId()) {
          oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
          oprot.writeString(struct.transferId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gatewayId != null) {
        if (struct.isSetGatewayId()) {
          oprot.writeFieldBegin(GATEWAY_ID_FIELD_DESC);
          oprot.writeString(struct.gatewayId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcHostname != null) {
        if (struct.isSetSrcHostname()) {
          oprot.writeFieldBegin(SRC_HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.srcHostname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcLoginName != null) {
        if (struct.isSetSrcLoginName()) {
          oprot.writeFieldBegin(SRC_LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.srcLoginName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSrcPort()) {
        oprot.writeFieldBegin(SRC_PORT_FIELD_DESC);
        oprot.writeI64(struct.srcPort);
        oprot.writeFieldEnd();
      }
      if (struct.srcProtocol != null) {
        if (struct.isSetSrcProtocol()) {
          oprot.writeFieldBegin(SRC_PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.srcProtocol.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcFilePath != null) {
        if (struct.isSetSrcFilePath()) {
          oprot.writeFieldBegin(SRC_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.srcFilePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcHostCredToken != null) {
        if (struct.isSetSrcHostCredToken()) {
          oprot.writeFieldBegin(SRC_HOST_CRED_TOKEN_FIELD_DESC);
          oprot.writeString(struct.srcHostCredToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.destHostname != null) {
        if (struct.isSetDestHostname()) {
          oprot.writeFieldBegin(DEST_HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.destHostname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.destLoginName != null) {
        if (struct.isSetDestLoginName()) {
          oprot.writeFieldBegin(DEST_LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.destLoginName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDestPort()) {
        oprot.writeFieldBegin(DEST_PORT_FIELD_DESC);
        oprot.writeI64(struct.destPort);
        oprot.writeFieldEnd();
      }
      if (struct.destProtocol != null) {
        if (struct.isSetDestProtocol()) {
          oprot.writeFieldBegin(DEST_PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.destProtocol.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.destFilePath != null) {
        if (struct.isSetDestFilePath()) {
          oprot.writeFieldBegin(DEST_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.destFilePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.destHostCredToken != null) {
        if (struct.isSetDestHostCredToken()) {
          oprot.writeFieldBegin(DEST_HOST_CRED_TOKEN_FIELD_DESC);
          oprot.writeString(struct.destHostCredToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileTransferMode != null) {
        if (struct.isSetFileTransferMode()) {
          oprot.writeFieldBegin(FILE_TRANSFER_MODE_FIELD_DESC);
          oprot.writeI32(struct.fileTransferMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.transferStatus != null) {
        if (struct.isSetTransferStatus()) {
          oprot.writeFieldBegin(TRANSFER_STATUS_FIELD_DESC);
          oprot.writeI32(struct.transferStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFileSize()) {
        oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.fileSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTransferTime()) {
        oprot.writeFieldBegin(TRANSFER_TIME_FIELD_DESC);
        oprot.writeI64(struct.transferTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreatedTime()) {
        oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
        oprot.writeI64(struct.createdTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifiedType()) {
        oprot.writeFieldBegin(LAST_MODIFIED_TYPE_FIELD_DESC);
        oprot.writeI64(struct.lastModifiedType);
        oprot.writeFieldEnd();
      }
      if (struct.callbackEmails != null) {
        if (struct.isSetCallbackEmails()) {
          oprot.writeFieldBegin(CALLBACK_EMAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.callbackEmails.size()));
            for (String _iter3 : struct.callbackEmails)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileTransferRequestModelTupleSchemeFactory implements SchemeFactory {
    public FileTransferRequestModelTupleScheme getScheme() {
      return new FileTransferRequestModelTupleScheme();
    }
  }

  private static class FileTransferRequestModelTupleScheme extends TupleScheme<FileTransferRequestModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileTransferRequestModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTransferId()) {
        optionals.set(0);
      }
      if (struct.isSetGatewayId()) {
        optionals.set(1);
      }
      if (struct.isSetUsername()) {
        optionals.set(2);
      }
      if (struct.isSetSrcHostname()) {
        optionals.set(3);
      }
      if (struct.isSetSrcLoginName()) {
        optionals.set(4);
      }
      if (struct.isSetSrcPort()) {
        optionals.set(5);
      }
      if (struct.isSetSrcProtocol()) {
        optionals.set(6);
      }
      if (struct.isSetSrcFilePath()) {
        optionals.set(7);
      }
      if (struct.isSetSrcHostCredToken()) {
        optionals.set(8);
      }
      if (struct.isSetDestHostname()) {
        optionals.set(9);
      }
      if (struct.isSetDestLoginName()) {
        optionals.set(10);
      }
      if (struct.isSetDestPort()) {
        optionals.set(11);
      }
      if (struct.isSetDestProtocol()) {
        optionals.set(12);
      }
      if (struct.isSetDestFilePath()) {
        optionals.set(13);
      }
      if (struct.isSetDestHostCredToken()) {
        optionals.set(14);
      }
      if (struct.isSetFileTransferMode()) {
        optionals.set(15);
      }
      if (struct.isSetTransferStatus()) {
        optionals.set(16);
      }
      if (struct.isSetFileSize()) {
        optionals.set(17);
      }
      if (struct.isSetTransferTime()) {
        optionals.set(18);
      }
      if (struct.isSetCreatedTime()) {
        optionals.set(19);
      }
      if (struct.isSetLastModifiedType()) {
        optionals.set(20);
      }
      if (struct.isSetCallbackEmails()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetTransferId()) {
        oprot.writeString(struct.transferId);
      }
      if (struct.isSetGatewayId()) {
        oprot.writeString(struct.gatewayId);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetSrcHostname()) {
        oprot.writeString(struct.srcHostname);
      }
      if (struct.isSetSrcLoginName()) {
        oprot.writeString(struct.srcLoginName);
      }
      if (struct.isSetSrcPort()) {
        oprot.writeI64(struct.srcPort);
      }
      if (struct.isSetSrcProtocol()) {
        oprot.writeI32(struct.srcProtocol.getValue());
      }
      if (struct.isSetSrcFilePath()) {
        oprot.writeString(struct.srcFilePath);
      }
      if (struct.isSetSrcHostCredToken()) {
        oprot.writeString(struct.srcHostCredToken);
      }
      if (struct.isSetDestHostname()) {
        oprot.writeString(struct.destHostname);
      }
      if (struct.isSetDestLoginName()) {
        oprot.writeString(struct.destLoginName);
      }
      if (struct.isSetDestPort()) {
        oprot.writeI64(struct.destPort);
      }
      if (struct.isSetDestProtocol()) {
        oprot.writeI32(struct.destProtocol.getValue());
      }
      if (struct.isSetDestFilePath()) {
        oprot.writeString(struct.destFilePath);
      }
      if (struct.isSetDestHostCredToken()) {
        oprot.writeString(struct.destHostCredToken);
      }
      if (struct.isSetFileTransferMode()) {
        oprot.writeI32(struct.fileTransferMode.getValue());
      }
      if (struct.isSetTransferStatus()) {
        oprot.writeI32(struct.transferStatus.getValue());
      }
      if (struct.isSetFileSize()) {
        oprot.writeI64(struct.fileSize);
      }
      if (struct.isSetTransferTime()) {
        oprot.writeI64(struct.transferTime);
      }
      if (struct.isSetCreatedTime()) {
        oprot.writeI64(struct.createdTime);
      }
      if (struct.isSetLastModifiedType()) {
        oprot.writeI64(struct.lastModifiedType);
      }
      if (struct.isSetCallbackEmails()) {
        {
          oprot.writeI32(struct.callbackEmails.size());
          for (String _iter4 : struct.callbackEmails)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileTransferRequestModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.transferId = iprot.readString();
        struct.setTransferIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gatewayId = iprot.readString();
        struct.setGatewayIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.srcHostname = iprot.readString();
        struct.setSrcHostnameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.srcLoginName = iprot.readString();
        struct.setSrcLoginNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.srcPort = iprot.readI64();
        struct.setSrcPortIsSet(true);
      }
      if (incoming.get(6)) {
        struct.srcProtocol = org.apache.airavata.model.data.transfer.StorageResourceProtocol.findByValue(iprot.readI32());
        struct.setSrcProtocolIsSet(true);
      }
      if (incoming.get(7)) {
        struct.srcFilePath = iprot.readString();
        struct.setSrcFilePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.srcHostCredToken = iprot.readString();
        struct.setSrcHostCredTokenIsSet(true);
      }
      if (incoming.get(9)) {
        struct.destHostname = iprot.readString();
        struct.setDestHostnameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.destLoginName = iprot.readString();
        struct.setDestLoginNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.destPort = iprot.readI64();
        struct.setDestPortIsSet(true);
      }
      if (incoming.get(12)) {
        struct.destProtocol = org.apache.airavata.model.data.transfer.StorageResourceProtocol.findByValue(iprot.readI32());
        struct.setDestProtocolIsSet(true);
      }
      if (incoming.get(13)) {
        struct.destFilePath = iprot.readString();
        struct.setDestFilePathIsSet(true);
      }
      if (incoming.get(14)) {
        struct.destHostCredToken = iprot.readString();
        struct.setDestHostCredTokenIsSet(true);
      }
      if (incoming.get(15)) {
        struct.fileTransferMode = org.apache.airavata.model.data.transfer.FileTransferMode.findByValue(iprot.readI32());
        struct.setFileTransferModeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.transferStatus = org.apache.airavata.model.data.transfer.FileTransferStatus.findByValue(iprot.readI32());
        struct.setTransferStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.fileSize = iprot.readI64();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.transferTime = iprot.readI64();
        struct.setTransferTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.createdTime = iprot.readI64();
        struct.setCreatedTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.lastModifiedType = iprot.readI64();
        struct.setLastModifiedTypeIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.callbackEmails = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.callbackEmails.add(_elem6);
          }
        }
        struct.setCallbackEmailsIsSet(true);
      }
    }
  }

}

