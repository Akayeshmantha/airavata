/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog.parser;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ExperimentParsingTemplateRegistration implements org.apache.thrift.TBase<ExperimentParsingTemplateRegistration, ExperimentParsingTemplateRegistration._Fields>, java.io.Serializable, Cloneable, Comparable<ExperimentParsingTemplateRegistration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExperimentParsingTemplateRegistration");

  private static final org.apache.thrift.protocol.TField EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExperimentParsingTemplateRegistrationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExperimentParsingTemplateRegistrationTupleSchemeFactory();

  private java.lang.String experimentId; // required
  private java.util.List<java.lang.String> templateIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPERIMENT_ID((short)1, "experimentId"),
    TEMPLATE_IDS((short)2, "templateIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPERIMENT_ID
          return EXPERIMENT_ID;
        case 2: // TEMPLATE_IDS
          return TEMPLATE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_IDS, new org.apache.thrift.meta_data.FieldMetaData("templateIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExperimentParsingTemplateRegistration.class, metaDataMap);
  }

  public ExperimentParsingTemplateRegistration() {
  }

  public ExperimentParsingTemplateRegistration(
    java.lang.String experimentId,
    java.util.List<java.lang.String> templateIds)
  {
    this();
    this.experimentId = experimentId;
    this.templateIds = templateIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExperimentParsingTemplateRegistration(ExperimentParsingTemplateRegistration other) {
    if (other.isSetExperimentId()) {
      this.experimentId = other.experimentId;
    }
    if (other.isSetTemplateIds()) {
      java.util.List<java.lang.String> __this__templateIds = new java.util.ArrayList<java.lang.String>(other.templateIds);
      this.templateIds = __this__templateIds;
    }
  }

  public ExperimentParsingTemplateRegistration deepCopy() {
    return new ExperimentParsingTemplateRegistration(this);
  }

  @Override
  public void clear() {
    this.experimentId = null;
    this.templateIds = null;
  }

  public java.lang.String getExperimentId() {
    return this.experimentId;
  }

  public void setExperimentId(java.lang.String experimentId) {
    this.experimentId = experimentId;
  }

  public void unsetExperimentId() {
    this.experimentId = null;
  }

  /** Returns true if field experimentId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentId() {
    return this.experimentId != null;
  }

  public void setExperimentIdIsSet(boolean value) {
    if (!value) {
      this.experimentId = null;
    }
  }

  public int getTemplateIdsSize() {
    return (this.templateIds == null) ? 0 : this.templateIds.size();
  }

  public java.util.Iterator<java.lang.String> getTemplateIdsIterator() {
    return (this.templateIds == null) ? null : this.templateIds.iterator();
  }

  public void addToTemplateIds(java.lang.String elem) {
    if (this.templateIds == null) {
      this.templateIds = new java.util.ArrayList<java.lang.String>();
    }
    this.templateIds.add(elem);
  }

  public java.util.List<java.lang.String> getTemplateIds() {
    return this.templateIds;
  }

  public void setTemplateIds(java.util.List<java.lang.String> templateIds) {
    this.templateIds = templateIds;
  }

  public void unsetTemplateIds() {
    this.templateIds = null;
  }

  /** Returns true if field templateIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateIds() {
    return this.templateIds != null;
  }

  public void setTemplateIdsIsSet(boolean value) {
    if (!value) {
      this.templateIds = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EXPERIMENT_ID:
      if (value == null) {
        unsetExperimentId();
      } else {
        setExperimentId((java.lang.String)value);
      }
      break;

    case TEMPLATE_IDS:
      if (value == null) {
        unsetTemplateIds();
      } else {
        setTemplateIds((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPERIMENT_ID:
      return getExperimentId();

    case TEMPLATE_IDS:
      return getTemplateIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EXPERIMENT_ID:
      return isSetExperimentId();
    case TEMPLATE_IDS:
      return isSetTemplateIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExperimentParsingTemplateRegistration)
      return this.equals((ExperimentParsingTemplateRegistration)that);
    return false;
  }

  public boolean equals(ExperimentParsingTemplateRegistration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_experimentId = true && this.isSetExperimentId();
    boolean that_present_experimentId = true && that.isSetExperimentId();
    if (this_present_experimentId || that_present_experimentId) {
      if (!(this_present_experimentId && that_present_experimentId))
        return false;
      if (!this.experimentId.equals(that.experimentId))
        return false;
    }

    boolean this_present_templateIds = true && this.isSetTemplateIds();
    boolean that_present_templateIds = true && that.isSetTemplateIds();
    if (this_present_templateIds || that_present_templateIds) {
      if (!(this_present_templateIds && that_present_templateIds))
        return false;
      if (!this.templateIds.equals(that.templateIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetExperimentId()) ? 131071 : 524287);
    if (isSetExperimentId())
      hashCode = hashCode * 8191 + experimentId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTemplateIds()) ? 131071 : 524287);
    if (isSetTemplateIds())
      hashCode = hashCode * 8191 + templateIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExperimentParsingTemplateRegistration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetExperimentId()).compareTo(other.isSetExperimentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentId, other.experimentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemplateIds()).compareTo(other.isSetTemplateIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateIds, other.templateIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExperimentParsingTemplateRegistration(");
    boolean first = true;

    sb.append("experimentId:");
    if (this.experimentId == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateIds:");
    if (this.templateIds == null) {
      sb.append("null");
    } else {
      sb.append(this.templateIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetExperimentId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'experimentId' is unset! Struct:" + toString());
    }

    if (!isSetTemplateIds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'templateIds' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExperimentParsingTemplateRegistrationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExperimentParsingTemplateRegistrationStandardScheme getScheme() {
      return new ExperimentParsingTemplateRegistrationStandardScheme();
    }
  }

  private static class ExperimentParsingTemplateRegistrationStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExperimentParsingTemplateRegistration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExperimentParsingTemplateRegistration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPERIMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experimentId = iprot.readString();
              struct.setExperimentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.templateIds = new java.util.ArrayList<java.lang.String>(_list40.size);
                java.lang.String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.templateIds.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setTemplateIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExperimentParsingTemplateRegistration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.experimentId != null) {
        oprot.writeFieldBegin(EXPERIMENT_ID_FIELD_DESC);
        oprot.writeString(struct.experimentId);
        oprot.writeFieldEnd();
      }
      if (struct.templateIds != null) {
        oprot.writeFieldBegin(TEMPLATE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.templateIds.size()));
          for (java.lang.String _iter43 : struct.templateIds)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExperimentParsingTemplateRegistrationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExperimentParsingTemplateRegistrationTupleScheme getScheme() {
      return new ExperimentParsingTemplateRegistrationTupleScheme();
    }
  }

  private static class ExperimentParsingTemplateRegistrationTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExperimentParsingTemplateRegistration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExperimentParsingTemplateRegistration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.experimentId);
      {
        oprot.writeI32(struct.templateIds.size());
        for (java.lang.String _iter44 : struct.templateIds)
        {
          oprot.writeString(_iter44);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExperimentParsingTemplateRegistration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.experimentId = iprot.readString();
      struct.setExperimentIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.templateIds = new java.util.ArrayList<java.lang.String>(_list45.size);
        java.lang.String _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = iprot.readString();
          struct.templateIds.add(_elem46);
        }
      }
      struct.setTemplateIdsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

