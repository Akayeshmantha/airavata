/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog.datamodels;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class FileStructure implements org.apache.thrift.TBase<FileStructure, FileStructure._Fields>, java.io.Serializable, Cloneable, Comparable<FileStructure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileStructure");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFile", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MODIFIED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileStructureStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileStructureTupleSchemeFactory();

  private java.lang.String name; // required
  private java.lang.String path; // required
  private boolean isFile; // required
  private long createdDate; // required
  private long modifiedDate; // required
  private java.lang.String owner; // required
  private java.nio.ByteBuffer content; // required
  private long size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    PATH((short)2, "path"),
    IS_FILE((short)3, "isFile"),
    CREATED_DATE((short)4, "createdDate"),
    MODIFIED_DATE((short)5, "modifiedDate"),
    OWNER((short)6, "owner"),
    CONTENT((short)7, "content"),
    SIZE((short)8, "size");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // PATH
          return PATH;
        case 3: // IS_FILE
          return IS_FILE;
        case 4: // CREATED_DATE
          return CREATED_DATE;
        case 5: // MODIFIED_DATE
          return MODIFIED_DATE;
        case 6: // OWNER
          return OWNER;
        case 7: // CONTENT
          return CONTENT;
        case 8: // SIZE
          return SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISFILE_ISSET_ID = 0;
  private static final int __CREATEDDATE_ISSET_ID = 1;
  private static final int __MODIFIEDDATE_ISSET_ID = 2;
  private static final int __SIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FILE, new org.apache.thrift.meta_data.FieldMetaData("isFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATED_DATE, new org.apache.thrift.meta_data.FieldMetaData("createdDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODIFIED_DATE, new org.apache.thrift.meta_data.FieldMetaData("modifiedDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileStructure.class, metaDataMap);
  }

  public FileStructure() {
  }

  public FileStructure(
    java.lang.String name,
    java.lang.String path,
    boolean isFile,
    long createdDate,
    long modifiedDate,
    java.lang.String owner,
    java.nio.ByteBuffer content,
    long size)
  {
    this();
    this.name = name;
    this.path = path;
    this.isFile = isFile;
    setIsFileIsSet(true);
    this.createdDate = createdDate;
    setCreatedDateIsSet(true);
    this.modifiedDate = modifiedDate;
    setModifiedDateIsSet(true);
    this.owner = owner;
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    this.size = size;
    setSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileStructure(FileStructure other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.isFile = other.isFile;
    this.createdDate = other.createdDate;
    this.modifiedDate = other.modifiedDate;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
    }
    this.size = other.size;
  }

  public FileStructure deepCopy() {
    return new FileStructure(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.path = null;
    setIsFileIsSet(false);
    this.isFile = false;
    setCreatedDateIsSet(false);
    this.createdDate = 0;
    setModifiedDateIsSet(false);
    this.modifiedDate = 0;
    this.owner = null;
    this.content = null;
    setSizeIsSet(false);
    this.size = 0;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public void setName(java.lang.String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getPath() {
    return this.path;
  }

  public void setPath(java.lang.String path) {
    this.path = path;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public boolean isIsFile() {
    return this.isFile;
  }

  public void setIsFile(boolean isFile) {
    this.isFile = isFile;
    setIsFileIsSet(true);
  }

  public void unsetIsFile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFILE_ISSET_ID);
  }

  /** Returns true if field isFile is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFILE_ISSET_ID);
  }

  public void setIsFileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFILE_ISSET_ID, value);
  }

  public long getCreatedDate() {
    return this.createdDate;
  }

  public void setCreatedDate(long createdDate) {
    this.createdDate = createdDate;
    setCreatedDateIsSet(true);
  }

  public void unsetCreatedDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATEDDATE_ISSET_ID);
  }

  /** Returns true if field createdDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATEDDATE_ISSET_ID);
  }

  public void setCreatedDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATEDDATE_ISSET_ID, value);
  }

  public long getModifiedDate() {
    return this.modifiedDate;
  }

  public void setModifiedDate(long modifiedDate) {
    this.modifiedDate = modifiedDate;
    setModifiedDateIsSet(true);
  }

  public void unsetModifiedDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIEDDATE_ISSET_ID);
  }

  /** Returns true if field modifiedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIEDDATE_ISSET_ID);
  }

  public void setModifiedDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIEDDATE_ISSET_ID, value);
  }

  public java.lang.String getOwner() {
    return this.owner;
  }

  public void setOwner(java.lang.String owner) {
    this.owner = owner;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public java.nio.ByteBuffer bufferForContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public void setContent(byte[] content) {
    this.content = content == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(content.clone());
  }

  public void setContent(java.nio.ByteBuffer content) {
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public long getSize() {
    return this.size;
  }

  public void setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
  }

  public void unsetSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case IS_FILE:
      if (value == null) {
        unsetIsFile();
      } else {
        setIsFile((java.lang.Boolean)value);
      }
      break;

    case CREATED_DATE:
      if (value == null) {
        unsetCreatedDate();
      } else {
        setCreatedDate((java.lang.Long)value);
      }
      break;

    case MODIFIED_DATE:
      if (value == null) {
        unsetModifiedDate();
      } else {
        setModifiedDate((java.lang.Long)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((java.lang.String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        if (value instanceof byte[]) {
          setContent((byte[])value);
        } else {
          setContent((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PATH:
      return getPath();

    case IS_FILE:
      return isIsFile();

    case CREATED_DATE:
      return getCreatedDate();

    case MODIFIED_DATE:
      return getModifiedDate();

    case OWNER:
      return getOwner();

    case CONTENT:
      return getContent();

    case SIZE:
      return getSize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PATH:
      return isSetPath();
    case IS_FILE:
      return isSetIsFile();
    case CREATED_DATE:
      return isSetCreatedDate();
    case MODIFIED_DATE:
      return isSetModifiedDate();
    case OWNER:
      return isSetOwner();
    case CONTENT:
      return isSetContent();
    case SIZE:
      return isSetSize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FileStructure)
      return this.equals((FileStructure)that);
    return false;
  }

  public boolean equals(FileStructure that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_isFile = true;
    boolean that_present_isFile = true;
    if (this_present_isFile || that_present_isFile) {
      if (!(this_present_isFile && that_present_isFile))
        return false;
      if (this.isFile != that.isFile)
        return false;
    }

    boolean this_present_createdDate = true;
    boolean that_present_createdDate = true;
    if (this_present_createdDate || that_present_createdDate) {
      if (!(this_present_createdDate && that_present_createdDate))
        return false;
      if (this.createdDate != that.createdDate)
        return false;
    }

    boolean this_present_modifiedDate = true;
    boolean that_present_modifiedDate = true;
    if (this_present_modifiedDate || that_present_modifiedDate) {
      if (!(this_present_modifiedDate && that_present_modifiedDate))
        return false;
      if (this.modifiedDate != that.modifiedDate)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isFile) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createdDate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(modifiedDate);

    hashCode = hashCode * 8191 + ((isSetOwner()) ? 131071 : 524287);
    if (isSetOwner())
      hashCode = hashCode * 8191 + owner.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(size);

    return hashCode;
  }

  @Override
  public int compareTo(FileStructure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsFile()).compareTo(other.isSetIsFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFile, other.isFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedDate()).compareTo(other.isSetCreatedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDate, other.createdDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModifiedDate()).compareTo(other.isSetModifiedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedDate, other.modifiedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FileStructure(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFile:");
    sb.append(this.isFile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdDate:");
    sb.append(this.createdDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifiedDate:");
    sb.append(this.modifiedDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.content, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!isSetPath()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'path' is unset! Struct:" + toString());
    }

    if (!isSetIsFile()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isFile' is unset! Struct:" + toString());
    }

    if (!isSetCreatedDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdDate' is unset! Struct:" + toString());
    }

    if (!isSetModifiedDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modifiedDate' is unset! Struct:" + toString());
    }

    if (!isSetOwner()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'owner' is unset! Struct:" + toString());
    }

    if (!isSetContent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' is unset! Struct:" + toString());
    }

    if (!isSetSize()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileStructureStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileStructureStandardScheme getScheme() {
      return new FileStructureStandardScheme();
    }
  }

  private static class FileStructureStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileStructure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFile = iprot.readBool();
              struct.setIsFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdDate = iprot.readI64();
              struct.setCreatedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODIFIED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifiedDate = iprot.readI64();
              struct.setModifiedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileStructure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_FILE_FIELD_DESC);
      oprot.writeBool(struct.isFile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATED_DATE_FIELD_DESC);
      oprot.writeI64(struct.createdDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODIFIED_DATE_FIELD_DESC);
      oprot.writeI64(struct.modifiedDate);
      oprot.writeFieldEnd();
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI64(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileStructureTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileStructureTupleScheme getScheme() {
      return new FileStructureTupleScheme();
    }
  }

  private static class FileStructureTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileStructure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.path);
      oprot.writeBool(struct.isFile);
      oprot.writeI64(struct.createdDate);
      oprot.writeI64(struct.modifiedDate);
      oprot.writeString(struct.owner);
      oprot.writeBinary(struct.content);
      oprot.writeI64(struct.size);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.path = iprot.readString();
      struct.setPathIsSet(true);
      struct.isFile = iprot.readBool();
      struct.setIsFileIsSet(true);
      struct.createdDate = iprot.readI64();
      struct.setCreatedDateIsSet(true);
      struct.modifiedDate = iprot.readI64();
      struct.setModifiedDateIsSet(true);
      struct.owner = iprot.readString();
      struct.setOwnerIsSet(true);
      struct.content = iprot.readBinary();
      struct.setContentIsSet(true);
      struct.size = iprot.readI64();
      struct.setSizeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

