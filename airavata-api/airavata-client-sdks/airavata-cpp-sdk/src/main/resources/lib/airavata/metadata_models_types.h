/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef metadata_models_TYPES_H
#define metadata_models_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace apache { namespace airavata { namespace model { namespace data { namespace metadata {

struct MetadataType {
  enum type {
    FILE = 0,
    COLLECTION = 1
  };
};

extern const std::map<int, const char*> _MetadataType_VALUES_TO_NAMES;

class MetadataModel;

typedef struct _MetadataModel__isset {
  _MetadataModel__isset() : metadataId(false), gatewayId(false), username(false), size(false), sharedUsers(false), sharedPublic(false), userFriendlyName(false), userFriendlyDescription(false), metadataType(false), associatedEntityId(false), customInformation(false), creationTime(false), lastModifiedTime(false) {}
  bool metadataId :1;
  bool gatewayId :1;
  bool username :1;
  bool size :1;
  bool sharedUsers :1;
  bool sharedPublic :1;
  bool userFriendlyName :1;
  bool userFriendlyDescription :1;
  bool metadataType :1;
  bool associatedEntityId :1;
  bool customInformation :1;
  bool creationTime :1;
  bool lastModifiedTime :1;
} _MetadataModel__isset;

class MetadataModel {
 public:

  MetadataModel(const MetadataModel&);
  MetadataModel& operator=(const MetadataModel&);
  MetadataModel() : metadataId(), gatewayId(), username(), size(0), sharedPublic(0), userFriendlyName(), userFriendlyDescription(), metadataType((MetadataType::type)0), associatedEntityId(), creationTime(0), lastModifiedTime(0) {
  }

  virtual ~MetadataModel() throw();
  std::string metadataId;
  std::string gatewayId;
  std::string username;
  double size;
  std::vector<std::string>  sharedUsers;
  bool sharedPublic;
  std::string userFriendlyName;
  std::string userFriendlyDescription;
  MetadataType::type metadataType;
  std::string associatedEntityId;
  std::map<std::string, std::string>  customInformation;
  int64_t creationTime;
  int64_t lastModifiedTime;

  _MetadataModel__isset __isset;

  void __set_metadataId(const std::string& val);

  void __set_gatewayId(const std::string& val);

  void __set_username(const std::string& val);

  void __set_size(const double val);

  void __set_sharedUsers(const std::vector<std::string> & val);

  void __set_sharedPublic(const bool val);

  void __set_userFriendlyName(const std::string& val);

  void __set_userFriendlyDescription(const std::string& val);

  void __set_metadataType(const MetadataType::type val);

  void __set_associatedEntityId(const std::string& val);

  void __set_customInformation(const std::map<std::string, std::string> & val);

  void __set_creationTime(const int64_t val);

  void __set_lastModifiedTime(const int64_t val);

  bool operator == (const MetadataModel & rhs) const
  {
    if (__isset.metadataId != rhs.__isset.metadataId)
      return false;
    else if (__isset.metadataId && !(metadataId == rhs.metadataId))
      return false;
    if (__isset.gatewayId != rhs.__isset.gatewayId)
      return false;
    else if (__isset.gatewayId && !(gatewayId == rhs.gatewayId))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    if (__isset.sharedUsers != rhs.__isset.sharedUsers)
      return false;
    else if (__isset.sharedUsers && !(sharedUsers == rhs.sharedUsers))
      return false;
    if (__isset.sharedPublic != rhs.__isset.sharedPublic)
      return false;
    else if (__isset.sharedPublic && !(sharedPublic == rhs.sharedPublic))
      return false;
    if (__isset.userFriendlyName != rhs.__isset.userFriendlyName)
      return false;
    else if (__isset.userFriendlyName && !(userFriendlyName == rhs.userFriendlyName))
      return false;
    if (__isset.userFriendlyDescription != rhs.__isset.userFriendlyDescription)
      return false;
    else if (__isset.userFriendlyDescription && !(userFriendlyDescription == rhs.userFriendlyDescription))
      return false;
    if (__isset.metadataType != rhs.__isset.metadataType)
      return false;
    else if (__isset.metadataType && !(metadataType == rhs.metadataType))
      return false;
    if (__isset.associatedEntityId != rhs.__isset.associatedEntityId)
      return false;
    else if (__isset.associatedEntityId && !(associatedEntityId == rhs.associatedEntityId))
      return false;
    if (__isset.customInformation != rhs.__isset.customInformation)
      return false;
    else if (__isset.customInformation && !(customInformation == rhs.customInformation))
      return false;
    if (__isset.creationTime != rhs.__isset.creationTime)
      return false;
    else if (__isset.creationTime && !(creationTime == rhs.creationTime))
      return false;
    if (__isset.lastModifiedTime != rhs.__isset.lastModifiedTime)
      return false;
    else if (__isset.lastModifiedTime && !(lastModifiedTime == rhs.lastModifiedTime))
      return false;
    return true;
  }
  bool operator != (const MetadataModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetadataModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetadataModel &a, MetadataModel &b);

inline std::ostream& operator<<(std::ostream& out, const MetadataModel& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
