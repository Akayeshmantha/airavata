/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "file__transfer_models_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace airavata { namespace model { namespace file {

int _kStorageResourceProtocolValues[] = {
  StorageResourceProtocol::SCP,
  StorageResourceProtocol::SFTP,
  StorageResourceProtocol::HTTP,
  StorageResourceProtocol::HTTPS,
  StorageResourceProtocol::GridFTP,
  StorageResourceProtocol::LOCAL
};
const char* _kStorageResourceProtocolNames[] = {
  "SCP",
  "SFTP",
  "HTTP",
  "HTTPS",
  "GridFTP",
  "LOCAL"
};
const std::map<int, const char*> _StorageResourceProtocol_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kStorageResourceProtocolValues, _kStorageResourceProtocolNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFileNodeTypesValues[] = {
  FileNodeTypes::DIRECTORY,
  FileNodeTypes::FILE
};
const char* _kFileNodeTypesNames[] = {
  "DIRECTORY",
  "FILE"
};
const std::map<int, const char*> _FileNodeTypes_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFileNodeTypesValues, _kFileNodeTypesNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFileTransferModeValues[] = {
  FileTransferMode::SYNC,
  FileTransferMode::ASYNC
};
const char* _kFileTransferModeNames[] = {
  "SYNC",
  "ASYNC"
};
const std::map<int, const char*> _FileTransferMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFileTransferModeValues, _kFileTransferModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFileTransferStatusValues[] = {
  FileTransferStatus::CREATED,
  FileTransferStatus::QUEUED,
  FileTransferStatus::RUNNING,
  FileTransferStatus::COMPLETED,
  FileTransferStatus::FAILED
};
const char* _kFileTransferStatusNames[] = {
  "CREATED",
  "QUEUED",
  "RUNNING",
  "COMPLETED",
  "FAILED"
};
const std::map<int, const char*> _FileTransferStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kFileTransferStatusValues, _kFileTransferStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


FileTransferRequest::~FileTransferRequest() throw() {
}


void FileTransferRequest::__set_transferId(const std::string& val) {
  this->transferId = val;
__isset.transferId = true;
}

void FileTransferRequest::__set_srcHostname(const std::string& val) {
  this->srcHostname = val;
__isset.srcHostname = true;
}

void FileTransferRequest::__set_srcLoginName(const std::string& val) {
  this->srcLoginName = val;
__isset.srcLoginName = true;
}

void FileTransferRequest::__set_srcPort(const int64_t val) {
  this->srcPort = val;
__isset.srcPort = true;
}

void FileTransferRequest::__set_srcProtocol(const StorageResourceProtocol::type val) {
  this->srcProtocol = val;
__isset.srcProtocol = true;
}

void FileTransferRequest::__set_srcFilePath(const std::string& val) {
  this->srcFilePath = val;
__isset.srcFilePath = true;
}

void FileTransferRequest::__set_srcHostCredToken(const std::string& val) {
  this->srcHostCredToken = val;
__isset.srcHostCredToken = true;
}

void FileTransferRequest::__set_destHostname(const std::string& val) {
  this->destHostname = val;
__isset.destHostname = true;
}

void FileTransferRequest::__set_destLoginName(const std::string& val) {
  this->destLoginName = val;
__isset.destLoginName = true;
}

void FileTransferRequest::__set_destPort(const int64_t val) {
  this->destPort = val;
__isset.destPort = true;
}

void FileTransferRequest::__set_destProtocol(const StorageResourceProtocol::type val) {
  this->destProtocol = val;
__isset.destProtocol = true;
}

void FileTransferRequest::__set_destFilePath(const std::string& val) {
  this->destFilePath = val;
__isset.destFilePath = true;
}

void FileTransferRequest::__set_destHostCredToken(const std::string& val) {
  this->destHostCredToken = val;
__isset.destHostCredToken = true;
}

void FileTransferRequest::__set_fileTransferMode(const FileTransferMode::type val) {
  this->fileTransferMode = val;
__isset.fileTransferMode = true;
}

void FileTransferRequest::__set_transferStatus(const FileTransferStatus::type val) {
  this->transferStatus = val;
__isset.transferStatus = true;
}

void FileTransferRequest::__set_fileSize(const int64_t val) {
  this->fileSize = val;
__isset.fileSize = true;
}

void FileTransferRequest::__set_transferTime(const int64_t val) {
  this->transferTime = val;
__isset.transferTime = true;
}

void FileTransferRequest::__set_createdTime(const int64_t val) {
  this->createdTime = val;
__isset.createdTime = true;
}

void FileTransferRequest::__set_lastModifiedType(const int64_t val) {
  this->lastModifiedType = val;
__isset.lastModifiedType = true;
}

uint32_t FileTransferRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transferId);
          this->__isset.transferId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->srcHostname);
          this->__isset.srcHostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->srcLoginName);
          this->__isset.srcLoginName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->srcPort);
          this->__isset.srcPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->srcProtocol = (StorageResourceProtocol::type)ecast0;
          this->__isset.srcProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->srcFilePath);
          this->__isset.srcFilePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->srcHostCredToken);
          this->__isset.srcHostCredToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destHostname);
          this->__isset.destHostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destLoginName);
          this->__isset.destLoginName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->destPort);
          this->__isset.destPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->destProtocol = (StorageResourceProtocol::type)ecast1;
          this->__isset.destProtocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destFilePath);
          this->__isset.destFilePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destHostCredToken);
          this->__isset.destHostCredToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->fileTransferMode = (FileTransferMode::type)ecast2;
          this->__isset.fileTransferMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->transferStatus = (FileTransferStatus::type)ecast3;
          this->__isset.transferStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileSize);
          this->__isset.fileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transferTime);
          this->__isset.transferTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModifiedType);
          this->__isset.lastModifiedType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileTransferRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FileTransferRequest");

  if (this->__isset.transferId) {
    xfer += oprot->writeFieldBegin("transferId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->transferId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcHostname) {
    xfer += oprot->writeFieldBegin("srcHostname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->srcHostname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcLoginName) {
    xfer += oprot->writeFieldBegin("srcLoginName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->srcLoginName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcPort) {
    xfer += oprot->writeFieldBegin("srcPort", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->srcPort);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcProtocol) {
    xfer += oprot->writeFieldBegin("srcProtocol", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->srcProtocol);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcFilePath) {
    xfer += oprot->writeFieldBegin("srcFilePath", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->srcFilePath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcHostCredToken) {
    xfer += oprot->writeFieldBegin("srcHostCredToken", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->srcHostCredToken);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destHostname) {
    xfer += oprot->writeFieldBegin("destHostname", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->destHostname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destLoginName) {
    xfer += oprot->writeFieldBegin("destLoginName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->destLoginName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destPort) {
    xfer += oprot->writeFieldBegin("destPort", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->destPort);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destProtocol) {
    xfer += oprot->writeFieldBegin("destProtocol", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->destProtocol);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destFilePath) {
    xfer += oprot->writeFieldBegin("destFilePath", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->destFilePath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destHostCredToken) {
    xfer += oprot->writeFieldBegin("destHostCredToken", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->destHostCredToken);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fileTransferMode) {
    xfer += oprot->writeFieldBegin("fileTransferMode", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32((int32_t)this->fileTransferMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transferStatus) {
    xfer += oprot->writeFieldBegin("transferStatus", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32((int32_t)this->transferStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fileSize) {
    xfer += oprot->writeFieldBegin("fileSize", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->fileSize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transferTime) {
    xfer += oprot->writeFieldBegin("transferTime", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->transferTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdTime) {
    xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 18);
    xfer += oprot->writeI64(this->createdTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModifiedType) {
    xfer += oprot->writeFieldBegin("lastModifiedType", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->lastModifiedType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileTransferRequest &a, FileTransferRequest &b) {
  using ::std::swap;
  swap(a.transferId, b.transferId);
  swap(a.srcHostname, b.srcHostname);
  swap(a.srcLoginName, b.srcLoginName);
  swap(a.srcPort, b.srcPort);
  swap(a.srcProtocol, b.srcProtocol);
  swap(a.srcFilePath, b.srcFilePath);
  swap(a.srcHostCredToken, b.srcHostCredToken);
  swap(a.destHostname, b.destHostname);
  swap(a.destLoginName, b.destLoginName);
  swap(a.destPort, b.destPort);
  swap(a.destProtocol, b.destProtocol);
  swap(a.destFilePath, b.destFilePath);
  swap(a.destHostCredToken, b.destHostCredToken);
  swap(a.fileTransferMode, b.fileTransferMode);
  swap(a.transferStatus, b.transferStatus);
  swap(a.fileSize, b.fileSize);
  swap(a.transferTime, b.transferTime);
  swap(a.createdTime, b.createdTime);
  swap(a.lastModifiedType, b.lastModifiedType);
  swap(a.__isset, b.__isset);
}

FileTransferRequest::FileTransferRequest(const FileTransferRequest& other4) {
  transferId = other4.transferId;
  srcHostname = other4.srcHostname;
  srcLoginName = other4.srcLoginName;
  srcPort = other4.srcPort;
  srcProtocol = other4.srcProtocol;
  srcFilePath = other4.srcFilePath;
  srcHostCredToken = other4.srcHostCredToken;
  destHostname = other4.destHostname;
  destLoginName = other4.destLoginName;
  destPort = other4.destPort;
  destProtocol = other4.destProtocol;
  destFilePath = other4.destFilePath;
  destHostCredToken = other4.destHostCredToken;
  fileTransferMode = other4.fileTransferMode;
  transferStatus = other4.transferStatus;
  fileSize = other4.fileSize;
  transferTime = other4.transferTime;
  createdTime = other4.createdTime;
  lastModifiedType = other4.lastModifiedType;
  __isset = other4.__isset;
}
FileTransferRequest& FileTransferRequest::operator=(const FileTransferRequest& other5) {
  transferId = other5.transferId;
  srcHostname = other5.srcHostname;
  srcLoginName = other5.srcLoginName;
  srcPort = other5.srcPort;
  srcProtocol = other5.srcProtocol;
  srcFilePath = other5.srcFilePath;
  srcHostCredToken = other5.srcHostCredToken;
  destHostname = other5.destHostname;
  destLoginName = other5.destLoginName;
  destPort = other5.destPort;
  destProtocol = other5.destProtocol;
  destFilePath = other5.destFilePath;
  destHostCredToken = other5.destHostCredToken;
  fileTransferMode = other5.fileTransferMode;
  transferStatus = other5.transferStatus;
  fileSize = other5.fileSize;
  transferTime = other5.transferTime;
  createdTime = other5.createdTime;
  lastModifiedType = other5.lastModifiedType;
  __isset = other5.__isset;
  return *this;
}
void FileTransferRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileTransferRequest(";
  out << "transferId="; (__isset.transferId ? (out << to_string(transferId)) : (out << "<null>"));
  out << ", " << "srcHostname="; (__isset.srcHostname ? (out << to_string(srcHostname)) : (out << "<null>"));
  out << ", " << "srcLoginName="; (__isset.srcLoginName ? (out << to_string(srcLoginName)) : (out << "<null>"));
  out << ", " << "srcPort="; (__isset.srcPort ? (out << to_string(srcPort)) : (out << "<null>"));
  out << ", " << "srcProtocol="; (__isset.srcProtocol ? (out << to_string(srcProtocol)) : (out << "<null>"));
  out << ", " << "srcFilePath="; (__isset.srcFilePath ? (out << to_string(srcFilePath)) : (out << "<null>"));
  out << ", " << "srcHostCredToken="; (__isset.srcHostCredToken ? (out << to_string(srcHostCredToken)) : (out << "<null>"));
  out << ", " << "destHostname="; (__isset.destHostname ? (out << to_string(destHostname)) : (out << "<null>"));
  out << ", " << "destLoginName="; (__isset.destLoginName ? (out << to_string(destLoginName)) : (out << "<null>"));
  out << ", " << "destPort="; (__isset.destPort ? (out << to_string(destPort)) : (out << "<null>"));
  out << ", " << "destProtocol="; (__isset.destProtocol ? (out << to_string(destProtocol)) : (out << "<null>"));
  out << ", " << "destFilePath="; (__isset.destFilePath ? (out << to_string(destFilePath)) : (out << "<null>"));
  out << ", " << "destHostCredToken="; (__isset.destHostCredToken ? (out << to_string(destHostCredToken)) : (out << "<null>"));
  out << ", " << "fileTransferMode="; (__isset.fileTransferMode ? (out << to_string(fileTransferMode)) : (out << "<null>"));
  out << ", " << "transferStatus="; (__isset.transferStatus ? (out << to_string(transferStatus)) : (out << "<null>"));
  out << ", " << "fileSize="; (__isset.fileSize ? (out << to_string(fileSize)) : (out << "<null>"));
  out << ", " << "transferTime="; (__isset.transferTime ? (out << to_string(transferTime)) : (out << "<null>"));
  out << ", " << "createdTime="; (__isset.createdTime ? (out << to_string(createdTime)) : (out << "<null>"));
  out << ", " << "lastModifiedType="; (__isset.lastModifiedType ? (out << to_string(lastModifiedType)) : (out << "<null>"));
  out << ")";
}


FileNode::~FileNode() throw() {
}


void FileNode::__set_type(const FileNodeTypes::type val) {
  this->type = val;
__isset.type = true;
}

void FileNode::__set_size(const int64_t val) {
  this->size = val;
__isset.size = true;
}

void FileNode::__set_nativeType(const std::string& val) {
  this->nativeType = val;
__isset.nativeType = true;
}

void FileNode::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void FileNode::__set_path(const std::string& val) {
  this->path = val;
__isset.path = true;
}

void FileNode::__set_storageHostName(const std::string& val) {
  this->storageHostName = val;
__isset.storageHostName = true;
}

void FileNode::__set_lastModifiedType(const int64_t val) {
  this->lastModifiedType = val;
__isset.lastModifiedType = true;
}

void FileNode::__set_createdTime(const int64_t val) {
  this->createdTime = val;
__isset.createdTime = true;
}

uint32_t FileNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->type = (FileNodeTypes::type)ecast6;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nativeType);
          this->__isset.nativeType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storageHostName);
          this->__isset.storageHostName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModifiedType);
          this->__isset.lastModifiedType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FileNode");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nativeType) {
    xfer += oprot->writeFieldBegin("nativeType", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->nativeType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.path) {
    xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->path);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storageHostName) {
    xfer += oprot->writeFieldBegin("storageHostName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->storageHostName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModifiedType) {
    xfer += oprot->writeFieldBegin("lastModifiedType", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->lastModifiedType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdTime) {
    xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->createdTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileNode &a, FileNode &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.size, b.size);
  swap(a.nativeType, b.nativeType);
  swap(a.name, b.name);
  swap(a.path, b.path);
  swap(a.storageHostName, b.storageHostName);
  swap(a.lastModifiedType, b.lastModifiedType);
  swap(a.createdTime, b.createdTime);
  swap(a.__isset, b.__isset);
}

FileNode::FileNode(const FileNode& other7) {
  type = other7.type;
  size = other7.size;
  nativeType = other7.nativeType;
  name = other7.name;
  path = other7.path;
  storageHostName = other7.storageHostName;
  lastModifiedType = other7.lastModifiedType;
  createdTime = other7.createdTime;
  __isset = other7.__isset;
}
FileNode& FileNode::operator=(const FileNode& other8) {
  type = other8.type;
  size = other8.size;
  nativeType = other8.nativeType;
  name = other8.name;
  path = other8.path;
  storageHostName = other8.storageHostName;
  lastModifiedType = other8.lastModifiedType;
  createdTime = other8.createdTime;
  __isset = other8.__isset;
  return *this;
}
void FileNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileNode(";
  out << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "size="; (__isset.size ? (out << to_string(size)) : (out << "<null>"));
  out << ", " << "nativeType="; (__isset.nativeType ? (out << to_string(nativeType)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "path="; (__isset.path ? (out << to_string(path)) : (out << "<null>"));
  out << ", " << "storageHostName="; (__isset.storageHostName ? (out << to_string(storageHostName)) : (out << "<null>"));
  out << ", " << "lastModifiedType="; (__isset.lastModifiedType ? (out << to_string(lastModifiedType)) : (out << "<null>"));
  out << ", " << "createdTime="; (__isset.createdTime ? (out << to_string(createdTime)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace
