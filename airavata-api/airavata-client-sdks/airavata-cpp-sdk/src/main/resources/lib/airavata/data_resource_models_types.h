/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef data_resource_models_TYPES_H
#define data_resource_models_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace apache { namespace airavata { namespace model { namespace data { namespace resource {

class ResourceModel;

class ReplicaLocationModel;

typedef struct _ResourceModel__isset {
  _ResourceModel__isset() : resourceId(false), resourceName(false), replicaLocations(false) {}
  bool resourceId :1;
  bool resourceName :1;
  bool replicaLocations :1;
} _ResourceModel__isset;

class ResourceModel {
 public:

  static const char* ascii_fingerprint; // = "D638A8293F444DF2C34755C1D925146E";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0x38,0xA8,0x29,0x3F,0x44,0x4D,0xF2,0xC3,0x47,0x55,0xC1,0xD9,0x25,0x14,0x6E};

  ResourceModel(const ResourceModel&);
  ResourceModel& operator=(const ResourceModel&);
  ResourceModel() : resourceId(), resourceName() {
  }

  virtual ~ResourceModel() throw();
  std::string resourceId;
  std::string resourceName;
  std::vector<ReplicaLocationModel>  replicaLocations;

  _ResourceModel__isset __isset;

  void __set_resourceId(const std::string& val);

  void __set_resourceName(const std::string& val);

  void __set_replicaLocations(const std::vector<ReplicaLocationModel> & val);

  bool operator == (const ResourceModel & rhs) const
  {
    if (__isset.resourceId != rhs.__isset.resourceId)
      return false;
    else if (__isset.resourceId && !(resourceId == rhs.resourceId))
      return false;
    if (__isset.resourceName != rhs.__isset.resourceName)
      return false;
    else if (__isset.resourceName && !(resourceName == rhs.resourceName))
      return false;
    if (!(replicaLocations == rhs.replicaLocations))
      return false;
    return true;
  }
  bool operator != (const ResourceModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResourceModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ResourceModel& obj);
};

void swap(ResourceModel &a, ResourceModel &b);

typedef struct _ReplicaLocationModel__isset {
  _ReplicaLocationModel__isset() : physicalLocations(false) {}
  bool physicalLocations :1;
} _ReplicaLocationModel__isset;

class ReplicaLocationModel {
 public:

  static const char* ascii_fingerprint; // = "6A3474ADDA840BE2091105F0DFB630C7";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x34,0x74,0xAD,0xDA,0x84,0x0B,0xE2,0x09,0x11,0x05,0xF0,0xDF,0xB6,0x30,0xC7};

  ReplicaLocationModel(const ReplicaLocationModel&);
  ReplicaLocationModel& operator=(const ReplicaLocationModel&);
  ReplicaLocationModel() {
  }

  virtual ~ReplicaLocationModel() throw();
  std::vector<std::string>  physicalLocations;

  _ReplicaLocationModel__isset __isset;

  void __set_physicalLocations(const std::vector<std::string> & val);

  bool operator == (const ReplicaLocationModel & rhs) const
  {
    if (__isset.physicalLocations != rhs.__isset.physicalLocations)
      return false;
    else if (__isset.physicalLocations && !(physicalLocations == rhs.physicalLocations))
      return false;
    return true;
  }
  bool operator != (const ReplicaLocationModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicaLocationModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReplicaLocationModel& obj);
};

void swap(ReplicaLocationModel &a, ReplicaLocationModel &b);

}}}}} // namespace

#endif
